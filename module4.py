
"""Сучасна система оцінок в університеті має такий вигляд:

Оцінка	Бали	Оцінка ECTS	Пояснення
1	0-34	F	Unsatisfactorily
2	35-59	FX	Unsatisfactorily
3	60-66	E	Enough
3	67-74	D	Satisfactorily
4	75-89	C	Good
5	90-95	В	Very good
5	96-100	A	Perfectly
Реалізуйте дві функції. Перша буде використовуватись у бухгалтерії при розрахунку стипендії, get_grade приймає ключ у вигляді 
оцінки ECTS, і має повертати відповідну п'ятибальну оцінку (перший стовпчик таблиці). Друга get_description теж приймає ключ у 
вигляді оцінки ECTS, але повертатиме пояснення оцінки в текстовому форматі (останній стовпчик таблиці) і буде використана в 
електронній заліковій книжці студента. На відсутній ключ функції повинні 
повертати значення None ."""

def get_grade(key):
    if key == "A":
        return 5
    elif key == "B":
        return 5
    elif key == "C":
        return 4
    elif key == "D":
        return 3
    elif key == "E":
        return 3
    elif key == "FX":
        return 2
    elif key == "F":
        return 1
    else:
        return None
    


def get_description(key): 
    grade = {"A": "Perfectly", "B": "Very good", "C": "Good", "D": "Satisfactorily", "E": "Enough", "FX": "Unsatisfactorily", "F": "Unsatisfactorily"}
    result = grade.get(key)
    return result
    

# print(get_grade("X"))     
# print(get_description("X"))

""" Як ми знаємо, ключ у словнику має бути унікальним, тоді як значення його ні. Реалізуйте функцію lookup_key для пошуку всіх ключів за 
значенням у словнику. Першим параметром у функцію ми передаємо словник, а другим — значення, що хочемо знайти. Таким чином, результат може бути
 як список ключів, так і порожній список, якщо ми нічого не 
знайдемо."""
data = {"A": "Perfectly", "B": "Very good", "C": "Good", "D": "Satisfactorily", "E": "Enough", "FX": "Unsatisfactorily", "F": "Unsatisfactorily"}
def lookup_key(data, value):
    result = []
    for key, val in data.items():
        if value == val:
            result.append(key)
    return result



# print(lookup_key(data,"Bed"))


"""У нас є список показників студентів групи – це список з отриманими балами з тестування. Необхідно поділити список на дві частини. 
Напишіть функцію split_list, яка приймає список (цілі числа), знаходить середнє значення бала у списку та ділить його на два списки. У 
перший потрапляють значення менше середнього, включаючи середнє значення, тоді як у другий — строго більше від середнього. Функція 
повертає кортеж цих двох списків. Для порожнього списку повертаємо два порожні списки."""

grade = [1,2,3,4,5,3,2,4]
def split_list(grade):
    if grade == []:
        return [], []
    else:
        low = []
        hight = []
        mid = sum(grade) / len(grade)
        for i in grade:
            if i <= mid:
                low.append(i)
            elif i > mid:
                hight.append(i)
                
        return low, hight 

# rint(split_list(grade))p


"""Є чотирикутна схема польотів дронів з координатами (0, 1, 2, 3). У нас є словник points, ключі якого — кортежі, точки польоту між 
координатами чотирикутника, вигляду (1, 2). Значення словника — це відстані між вказаними точками.

Приклад:

points = {(0, 1): 2, (0, 2): 3.8, (0, 3): 2.7, (1, 2): 2.5, (1, 3): 4.1, (2, 3): 3.9}
Напишіть функцію calculate_distance, яка на вхід приймає список координат чотирикутника зі словника виду [0, 1, 3, 2, 0]. Функція 
повинна підрахувати, використовуючи вказаний словник, яку загальну відстань пролетить дрон, рухаючись між точками польоту.

Примітки:

коли беремо у словника points значення, у ключі кортежі завжди має бути першою координата з меншим значенням — (2, 3), але не (3, 2);
для порожнього списку та списку з однією координатою функція calculate_distance має повертати 0. """


points = {
    (0, 1): 2,
    (0, 2): 3.8,
    (0, 3): 2.7,
    (1, 2): 2.5,
    (1, 3): 4.1,
    (2, 3): 3.9,
}


def calculate_distance(coordinates):
    if coordinates == [] or len(coordinates) == 1:
        return 0
    else:
        result = 0
        for i in range(len(coordinates)-1):
            point = tuple(sorted(coordinates[i:i+2]))
            result += points.get(point)
        return result    

# print(calculate_distance([0,1,3,2,0]))


"""Потрібно написати функцію реалізації наступного ігрового алгоритму. На вхід функції game подається два аргументи: список, що складається зі
 списків, та початкове значення power - енергія гравця. Внутрішні списки — це списки з числовим значенням енергії, які може поглинути гравець, 
 якщо вони менші або дорівнюють його енергії. Після поглинання елементу списку він рухається за списком далі та, або поглинає список повністю до
   кінця, або, якщо знаходить енергію вище за власну, залишає його і переходить до наступного списку. Наприкінці обходу всіх списків функція 
   повинна повернути загальну отриману енергію гравця.

Приклад списку:

[[1, 1, 5, 10], [10, 2], [1, 1, 1]]
Для цього списку і початкової енергії рівної 1 гравець поглине з першого списку перші два значення і залишить його, зустрівши значення 5, через 
те, що на цей момент матиме енергію в 3. Другий список пропустить відразу, а третій повністю поглине та отримає остаточну енергію в 6."""

def game(terra, power):
    for i in terra:
        for x in i:
            if x <= power:
                power += x 
            else:
                break
    return power


# print(game([[1, 1, 5, 10], [10, 2], [1, 1, 1]],1))


"""Всім відомо, що для доступу до кредитної картки банку потрібний пін-код. Класично склалося, що це поєднання чотири цифри. Нам необхідно 
вирішити наступне програмістське завдання. Є підготовлений перелік пін-кодів. Напишіть функцію is_valid_pin_
codes, яка буде приймати як параметр список цих пін-кодів — рядок з чотирьох цифр і повертати логічне значення — валідний список чи ні. 
Переконайтеся, що серед цих пін-кодів у списку не буде дублікатів, всі вони зберігаються у вигляді рядків, їх довжина дорівнює 4 символам і 
містять вони тільки цифри.

Приклад аргументу для функції is_valid_pin_codes:

['1101', '9034', '0011']
Якщо список відповідає всім поставленим умовам, функція повертає логічне значення True. Якщо хоч одну з умов порушено, повертається значення — 
False. Передбачити перевірку на порожній список в аргументі функції та повернути при цьому значення False."""

pin_codes = ['1101', '9034', '0011', '1101', '777', 'y765']
def is_valid_pin_codes(pin_codes):
    if pin_codes == []:
        return False
    else:
        if len(pin_codes) != len(set(pin_codes)):
            return False
        for pin in pin_codes:
            if not (pin.isdigit() and len(pin) == 4):
                return False
    return True



"""Браузер Chrome пропонує нам згенеровані випадкові паролі для сайтів та вебзастосунків. Ми потренуємось розв'язувати 
подібні завдання. 
Розіб'ємо 
завдання на три етапи. Перший етап — створіть функцію get_random_password, яка буде генерувати випадковий рядок пароля.

Вимоги:

у пароля має бути 8 символів.
для шифрування пароля будемо використовувати наступний набір символів:
()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
Ці символи лежать у межах від 40 до 126 коду в таблиці ASCII включно, і доступ до них можна отримати за допомогою функції chr.

chr(40)  # (
chr(126)  # ~
Щоб отримати випадкове ціле значення із заданого діапазону, ми використовуємо стандартний модуль Python random та його функцію randint. 
Вона має виклик виду randint(A, B) і повертає випадкове ціле число N, A ≤ N ≤ B.

from random import randint

random_num = randint(40, 126)
Після виконання коду в змінній random_num буде знаходитися випадкове ціле число від 40 до 126 включно.

Таким чином функція get_random_password має випадковим чином вибрати із запропонованого діапазону 8 символів та повернути згенерований пароль 
у вигляді рядка."""


from random import randint


def get_random_password():
    result = ""
    for i in range(8):
        random_num = randint(40, 126)
        sumbol = chr(random_num)
        result += sumbol
    return result


# print(get_random_password())



"""Другий етап. Необхідно написати функцію is_valid_password, яка перевірятиме отриманий параметр — пароль на надійність.

Критерії надійного пароля:

Довжина рядка пароля вісім символів.
Містить хоча б одну літеру у верхньому регістрі.
Містить хоча б одну літеру у нижньому регістрі.
Містить хоча б одну цифру.
Функція is_valid_password повинна повернути True, якщо переданий параметр пароль відповідає вимогам на надійність. Інакше повернути False."""

def is_valid_password(password):
    result = True
    is_upper = False
    is_lower = False
    is_digit = False
    if len(password) != 8:
        return False
    for i in password:
        if i.isupper():
            is_upper = True 
        elif i.islower():
            is_lower = True
        elif i.isdigit():
            is_digit = True
    if is_upper and is_lower and is_digit:
        result = True
    else:
        result = False

    return result
    